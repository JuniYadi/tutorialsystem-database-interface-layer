FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# DBIL

END POINT API Database to DynamoDB

## API Version
* /v1

## Search Query Builder
* Before make request query, make sure, close by double quote tags and separate with comma if using multiple query
* Use RAW Encode for send a POST Request
  * RAW: 
    * Single Query : `query="video_title=Pojok Programers"`
    * Multiple Query : `query="video_title=Pojok Programers,video_genre=Tutorial"`
  * RAW + Encode:
    * Single Query : `query=%22video_title%3DPojok+Programers%22`
    * Multiple Query : `%22video_title%3DPojok+Programers%2Cvideo_genre%3DTutorial%22`

| Parameter     | value              |
| ------------- | ------------------ |
| `video_title` | `Pojok Programers` |
| `video_genre` | `Tutorial`         |

## Content Category [/content/category]
Represents Category Videos. 

---
**Requests Tables:**
| Parameter     | type   | Status   | Description                     |
| ------------- | ------ | -------- | ------------------------------- |
| `name`        | string | required | name of content category        |
| `description` | string | required | description of content category |

---
**Table Routes:**
| URL                                      | Method | INFO                    |
| ---------------------------------------- | ------ | ----------------------- |
| `content/category`                       | GET    | Get All Data            |
| `content/category/store`                 | POST   | Save Data               |
| `content/category/{id}`                  | GET    | Get Data by ID          |
| `content/category/search`                | POST   | Search Data Query       |
| `content/category/update/{id}`           | POST   | Update Data by ID       |
| `content/category/delete/{id}`           | POST   | Delete Data by ID       |

### Get All Data [GET /content/category]

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-08-21T10:32:53+07:00",
                    "created_at": "2019-08-21T10:32:53+07:00",
                    "description": "Movie Action",
                    "id": "2f0a68a1-115d-4c24-9173-404638a1fc27",
                    "name": "Action"
                }
            ]
        }

### Save Data [POST /content/category/store]

+ Request (application/json)

        {
           "name": "Action",
           "description": "Movie Action"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "2f0a68a1-115d-4c24-9173-404638a1fc27"
            }
        }
        
### Get Data by ID [GET /content/category/{id}]

+ Parameter
    + id: `2f0a68a1-115d-4c24-9173-404638a1fc27` (string, required) - Id of Content Category

+ Response 200 (application/json)

        {
            "updated_at": "2019-08-21T10:32:53+07:00",
            "created_at": "2019-08-21T10:32:53+07:00",
            "description": "Movie Action",
            "id": "2f0a68a1-115d-4c24-9173-404638a1fc27",
            "name": "Action"
        }

### Search Data Query [POST /content/category/search]

**Requests Tables:**
| Parameter | type   | Status   | Description              |
| --------- | ------ | -------- | ------------------------ |
| `name`    | string | required | name of content category |

+ Request (application/json)

        {
            "name": "Action"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-08-21T10:32:53+07:00",
                    "created_at": "2019-08-21T10:32:53+07:00",
                    "description": "Movie Action",
                    "id": "2f0a68a1-115d-4c24-9173-404638a1fc27",
                    "name": "Action"
                }
            ]
        }
        
### Update Data by ID [POST /content/category/update/{id}]

+ Parameter
    + id: `2f0a68a1-115d-4c24-9173-404638a1fc27` (string, required) - Id of Content Category

+ Request (application/json)

        {
           "name": "Action 2",
           "description": "Movie Action 2"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "2f0a68a1-115d-4c24-9173-404638a1fc27"
            }
        }
        
### Delete Data by ID [POST /content/category/delete/{id}]

+ Parameter
    + id: `2f0a68a1-115d-4c24-9173-404638a1fc27` (string, required) - Id of Content Category

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            },
            "result": {
                "id": "2f0a68a1-115d-4c24-9173-404638a1fc27"
            }
        }

## Content Metadata [/content/metadata]
Represents Metadata of Videos. 

---
**Requests Tables:**
| Parameter           | type   | Status   | Description                       |
| ------------------- | ------ | -------- | --------------------------------- |
| `user_id`           | string | required | Id of User                        |
| `category_id`       | string | required | ID From Content Category          |
| `video_title`       | string | required | Title of Video                    |
| `video_description` | string | required | Description of Video              |
| `video_genre`       | string | required | Genre of Video                    |
| `privacy`           | string | required | Privacy of Video (public/private) |
| `video_viewers`     | int    | optional | Viewers of Video                  |
| `video_share`       | int    | optional | Share of Video                    |
| `video_saves`       | int    | optional | Saves of Video                    |
| `video_downloads`   | int    | optional | Downloads of Video                |

---
**Table Routes:**
| URL                                      | Method | INFO                    |
| ---------------------------------------- | ------ | ----------------------- |
| `content/metadata`                       | GET    | Get All Data            |
| `content/metadata/store`                 | POST   | Save Data               |
| `content/metadata/{id}`                  | GET    | Get Data by ID          |
| `content/metadata/search`                | POST   | Search Data Query       |
| `content/metadata/update/{id}`           | POST   | Update Data by ID       |
| `content/metadata/delete/{id}`           | POST   | Delete Data by ID       |


### Get All Data [GET /content/metadata]

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "category_id": "2f0a68a1-115d-4c24-9173-404638a1fc27",
                    "video_viewers": null,
                    "video_title": "Tutorial NodeJs - Bagian 1",
                    "created_at": "2019-08-21T16:50:23+07:00",
                    "privacy": "Public",
                    "video_genre": "Tutorial",
                    "video_description": "Tutorial Dasar NodeJs",
                    "updated_at": "2019-08-21T16:50:23+07:00",
                    "video_saves": null,
                    "user_id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e",
                    "video_share": null,
                    "video_downloads": null,
                    "id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
                }
            ]
        }

### Save Data [POST /content/metadata/store]

+ Request (application/json)

        {
            "user_id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e",
            "category_id": "2f0a68a1-115d-4c24-9173-404638a1fc27",
            "video_title": "Tutorial NodeJs - Bagian 1",
            "video_description": "Tutorial Dasar NodeJs",
            "video_genre": "Tutorial",
            "privacy": "Public"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
            }
        }
        
### Get Data by ID [GET /content/metadata/{id}]

+ Parameter
    + id: `f3c0fef5-6895-4a69-991b-efd01ec6e4a1` (string, required) - Id of Content Metadata

+ Response 200 (application/json)

        {
            "category_id": "2f0a68a1-115d-4c24-9173-404638a1fc27",
            "video_viewers": null,
            "video_title": "Tutorial NodeJs - Bagian 1",
            "created_at": "2019-08-21T16:50:23+07:00",
            "privacy": "Public",
            "video_genre": "Tutorial",
            "video_description": "Tutorial Dasar NodeJs",
            "updated_at": "2019-08-21T16:50:23+07:00",
            "video_saves": null,
            "user_id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e",
            "video_share": null,
            "video_downloads": null,
            "id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
        }

### Search Data Query [POST /content/metadata/search]

**Requests Tables:**
| Parameter | type   | Description                                |
| --------- | ------ | ------------------------------------------ |
| `query`   | string | Based on Table Name and Using `URL Encode` |

**Important:**
* Use `Search Query Builder`

+ Request (application/json)

        {
            "query": "%22video_title%3DTutorial+NodeJs%2Cvideo_description%3DTutorial%22"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "category_id": "2f0a68a1-115d-4c24-9173-404638a1fc27",
                    "video_viewers": null,
                    "video_title": "Tutorial NodeJs - Bagian 1",
                    "created_at": "2019-08-21T16:50:23+07:00",
                    "privacy": "Public",
                    "video_genre": "Tutorial",
                    "video_description": "Tutorial Dasar NodeJs",
                    "updated_at": "2019-08-21T16:50:23+07:00",
                    "video_saves": null,
                    "user_id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e",
                    "video_share": null,
                    "video_downloads": null,
                    "id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
                }
            ]
        }
        
### Update Data by ID [POST /content/metadata/update/{id}]

+ Parameter
    + id: `f3c0fef5-6895-4a69-991b-efd01ec6e4a1` (string, required) - Id of Content Metadata

+ Request (application/json)

        {
            "video_title": "Pojok Programers 2077"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
            }
        }
        
### Delete Data by ID [POST /content/metadata/delete/{id}]

+ Parameter
    + id: `f3c0fef5-6895-4a69-991b-efd01ec6e4a1` (string, required) - Id of Content Metadata

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            },
            "result": {
                "id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
            }
        }


## Content Metadata Video [/content/metadata/video]
Represents Metadata of Videos. 

---
**Requests Tables:**
| Parameter     | type   | Status   | Description         |
| ------------- | ------ | -------- | ------------------- |
| `metadata_id` | string | required | ID From Metadata    |
| `file_name`   | string | required | File Name of Video  |
| `file_path`   | string | required | File Path of Video  |
| `format`      | string | required | Format of Video     |
| `size`        | int    | required | Size of Video       |
| `resolution`  | string | required | Resolution of Video [using bytes](https://convertlive.com/u/convert/megabytes/to/bytes#100) |
| `duration`    | int    | required | Duration of Video [using seconds](https://convertlive.com/c/convert/time)   |

---
**Table Routes:**
| URL                                      | Method | INFO                    |
| ---------------------------------------- | ------ | ----------------------- |
| `content/metadata/video`                 | GET    | Get All Data            |
| `content/metadata/video/store`           | POST   | Save Data               |
| `content/metadata/video/{id}`            | GET    | Get Data by ID          |
| `content/metadata/video/search`          | POST   | Search Data Query       |
| `content/metadata/video/update/{id}`     | POST   | Update Data by ID       |
| `content/metadata/video/delete/{id}`     | POST   | Delete Data by ID       |


### Get All Data [GET /content/metadata/video]

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-08-22T09:26:34+07:00",
                    "size": 104857600,
                    "created_at": "2019-08-22T09:26:34+07:00",
                    "file_path": "/videos/1080p/tutorial-node-js-bagian-1.mp4",
                    "resolution": "1080p",
                    "file_name": "tutorial-node-js-bagian-1.mp4",
                    "id": "cb6efeda-319d-4dc7-bdb9-993286bcf709",
                    "duration": 30,
                    "format": "mp4",
                    "metadata_id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
                }
            ]
        }

### Save Data [POST /content/metadata/video/store]

+ Request (application/json)

        {
            "metadata_id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1",
            "file_name": "tutorial-node-js-bagian-1.mp4",
            "file_path": "/videos/1080p/tutorial-node-js-bagian-1.mp4",
            "size": 104857600,
            "format": "mp4",
            "resolution": "1080p",
            "duration": 30
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "cb6efeda-319d-4dc7-bdb9-993286bcf709"
            }
        }
        
### Get Data by ID [GET /content/metadata/video/{id}]

+ Parameter
    + id: `cb6efeda-319d-4dc7-bdb9-993286bcf709` (string, required) - Id of Content Metadata Video

+ Response 200 (application/json)

        {
            "updated_at": "2019-08-22T09:26:34+07:00",
            "size": 104857600,
            "created_at": "2019-08-22T09:26:34+07:00",
            "file_path": "/videos/1080p/tutorial-node-js-bagian-1.mp4",
            "resolution": "1080p",
            "file_name": "tutorial-node-js-bagian-1.mp4",
            "id": "cb6efeda-319d-4dc7-bdb9-993286bcf709",
            "duration": 30,
            "format": "mp4",
            "metadata_id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
        }

### Search Data Query [POST /content/metadata/video/search]

**Requests Tables:**
| Parameter | type   | Description                                |
| --------- | ------ | ------------------------------------------ |
| `query`   | string | Based on Table Name and Using `URL Encode` |

**Important:**
* Use `Search Query Builder`

+ Request (application/json)

        {
            "query": "%22format%3Dmp4%22"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-08-22T09:26:34+07:00",
                    "size": 104857600,
                    "created_at": "2019-08-22T09:26:34+07:00",
                    "file_path": "/videos/1080p/tutorial-node-js-bagian-1.mp4",
                    "resolution": "1080p",
                    "file_name": "tutorial-node-js-bagian-1.mp4",
                    "id": "cb6efeda-319d-4dc7-bdb9-993286bcf709",
                    "duration": 30,
                    "format": "mp4",
                    "metadata_id": "f3c0fef5-6895-4a69-991b-efd01ec6e4a1"
                }
            ]
        }
        
### Update Data by ID [POST /content/metadata/video/update/{id}]

+ Parameter
    + id: `cb6efeda-319d-4dc7-bdb9-993286bcf709` (string, required) - Id of Content Metadata Video

+ Request (application/json)

        {
            "size": 1024,
            "format": "mkv"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "cb6efeda-319d-4dc7-bdb9-993286bcf709"
            }
        }
        
### Delete Data by ID [POST /content/metadata/video/delete/{id}]

+ Parameter
    + id: `cb6efeda-319d-4dc7-bdb9-993286bcf709` (string, required) - Id of Content Metadata Video

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            },
            "result": {
                "id": "cb6efeda-319d-4dc7-bdb9-993286bcf709"
            }
        }
        
## Content Comment [/content/comment/]

Represents Comment of Video. 

---
**Requests Tables:**
| Parameter     | type   | Description                                               |
| ------------- | ------ | --------------------------------------------------------- |
| `metadata_id` | string | Metadata ID from Content Metadata                         |
| `user_id`     | string | User ID                                                   |
| `reply_id`    | string | ID From Comment, if they reply another comment (Optional) |
| `message`     | string | Reply Message                                             |

---
**Table Routes:**
| URL                                      | Method | INFO                    |
| ---------------------------------------- | ------ | ----------------------- |
| `content/category`                       | GET    | Get All Data            |
| `content/category/store`                 | POST   | Save Data               |
| `content/category/{id}`                  | GET    | Get Data by ID          |
| `content/category/search`                | POST   | Search Data Query       |
| `content/category/update/{id}`           | POST   | Update Data by ID       |
| `content/category/delete/{id}`           | POST   | Delete Data by ID       |

### Get All Data [GET /content/comment/metadata/{id}]

+ Parameter
    + id: `f3c0fef5-6895-4a69-991b-efd01ec6e4a1` (string, required) - Id of Content Metadata

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 2
            },
            "result": [
                {
                    "reply_id": null,
                    "updated_at": "2019-07-08T15:06:47+07:00",
                    "user_id": "123",
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-08T15:04:52+07:00",
                    "id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d",
                    "message": "this just test"
                },
                {
                    "reply_id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d",
                    "updated_at": "2019-07-08T15:07:48+07:00",
                    "user_id": "321",
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-08T15:05:43+07:00",
                    "id": "5ea23f47-94ab-4a38-88e4-a008bb2df23a",
                    "message": "this just reply test"
                }
            ]
        }

### Save Data [POST /content/comment/store]

+ Request (application/json)

        {
            "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
            "user_id": "123",
            "message": "this just test"
        }


+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d"
            }
        }

### Get Comment by ID [GET /content/comment/{id}]

+ Parameter
    + id: `5ea23f47-94ab-4a38-88e4-a008bb2df23a` (string, required) - Id of Content Comment

+ Response 200 (application/json)

        {
            "reply_id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d",
            "updated_at": "2019-07-08T15:07:48+07:00",
            "user_id": "321",
            "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
            "created_at": "2019-07-08T15:05:43+07:00",
            "id": "5ea23f47-94ab-4a38-88e4-a008bb2df23a",
            "message": "this just reply test"
        }

### Update Data by ID [POST /content/comment/update/{id}]

+ Parameter
    + id: `5ea23f47-94ab-4a38-88e4-a008bb2df23a` (string, required) - Id of Content Comment

+ Request (application/json)

        {
            "metadata_id": "83f75217-bcaf-415f-1234-8ca34a5b16be"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "5ea23f47-94ab-4a38-88e4-a008bb2df23a"
            }
        }
        
### Delete Data by ID [POST /content/metadata/delete/{id}]

+ Parameter
    + id: `5ea23f47-94ab-4a38-88e4-a008bb2df23a` (string, required) - Id of Content Comment

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            },
            "result": {
                "id": "5ea23f47-94ab-4a38-88e4-a008bb2df23a"
            }
        }   
        
## Content Playlists Category [/content/playlists/category]

### Get All Data [GET]

**Endpoint Path:** `GET content/playlists/category`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-07-16T17:26:37+07:00",
                    "user_id": 123,
                    "description": "Step By Step Membuat Node JS",
                    "created_at": "2019-07-16T17:26:37+07:00",
                    "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "title": "Tutorial Node JS Untuk Pemula",
                    "status": "publik"
                }
            ]
        }


### Save Data [POST /content/playlists/category/store]

**Endpoint Path:** `POST /content/playlists/category/store`

### Requests
| Parameter         | type     | Description                                                             |
| ------------------------ | --------- | -------------------------------------------------------------------------------- |
| `user_id`         | string | User ID                                                                     |
| `title`             | string | title of content playlists category             |
| `description` | string | description of content playlists category |
| `status`           | string | `publik|user|pribadi`                                         |

+ Request (application/json)

        {
            "user_id": 123,
            "title": "Tutorial Node JS Untuk Pemula",
            "description": "Step By Step Membuat Node JS",
            "status": "publik"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e"
            }
        }
        
### Get Data by ID [GET /content/playlists/category/a02d33c3-e82e-4df7-be1f-c01a943ad55e]

**Endpoint Path:** `GET /content/playlists/category/{id}`

+ Response 200 (application/json)

        {
            "updated_at": "2019-07-16T17:26:37+07:00",
            "user_id": 123,
            "description": "Step By Step Membuat Node JS",
            "created_at": "2019-07-16T17:26:37+07:00",
            "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
            "title": "Tutorial Node JS Untuk Pemula",
            "status": "publik"
        }

### Search Data Query [POST /content/playlists/category/search]

**Endpoint Path:** `POST /content/playlists/category/search`

### Requests
| Parameter | type   | Description                         |
| --------- | ------ | ----------------------------------- |
| `title`   | string | title of content playlists category |

+ Request (application/json)

        {
            "title": "Tutorial Node JS Untuk Pemula"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-07-16T17:26:37+07:00",
                    "user_id": 123,
                    "description": "Step By Step Membuat Node JS",
                    "created_at": "2019-07-16T17:26:37+07:00",
                    "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "title": "Tutorial Node JS Untuk Pemula",
                    "status": "publik"
                }
            ]
        }
        
### Update Data by ID [POST /content/playlists/category/update/a02d33c3-e82e-4df7-be1f-c01a943ad55e]

**Endpoint Path:** `POST /content/playlists/category/update/{id}`

### Requests
| Parameter | type | Description |
| -- | --- | -- |
| `user_id` | string | User ID |
| `title` | string | title of content playlists category |
| `description` | string | description of content playlists category |
| `status` | string | `publik|user|pribadi` |

+ Request (application/json)

        {
            "title": "Tutorial Node JS"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e"
            }
        }
        
### Delete Data by ID [POST /content/playlists/category/delete/a02d33c3-e82e-4df7-be1f-c01a943ad55e]

**Endpoint Path:** `POST /content/playlists/category/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            }
        }

## Content Playlists [/content/playlists]

### Get All Data [GET]

**Endpoint Path:** `GET content/playlists`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-07-16T18:21:42+07:00",
                    "user_id": 123,
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-16T18:21:42+07:00",
                    "id": "908244fb-3298-48ac-9d80-ce454782125f",
                    "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "last_watch": 60,
                    "order_list": 1
                }
            ]
        }


### Save Data [POST /content/playlists/store]

**Endpoint Path:** `/content/playlists/store`

### Requests
| Parameter                         | type     | Description                                                               |
| ---------------------------------------- | --------- | ---------------------------------------------------------------------------------- |
| `user_id`                         | string | User ID                                                                       |
| `playlistcategory_id` | string | ID From content playlists category                 |
| `metadata_id`                 | string | ID From content metadata                                     |
| `order_list`                   | int       | (Optional) Order Playlist                                   |
| `last_watch`                   | int       | (Optional) Remember Last Watch `in second` |

+ Request (application/json)

        {
            "user_id": 123,
            "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
            "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
            "order_list": 1,
            "last_watch": 60
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "908244fb-3298-48ac-9d80-ce454782125f"
            }
        }
  


### Get Data by ID [GET /content/playlists/908244fb-3298-48ac-9d80-ce454782125f]

**Endpoint Path:** `GET /content/playlists/{id}`

### Important
* `next` and `previous` will work, only if `order_list` has been set
* return null if `next` and `previous` data not found

### Response
| Parameter  | type  | Description       |
| ---------- | ----- | ----------------- |
| `playlist` | array | Playlist Now      |
| `next`     | array | Playlist Next     |
| `previous` | array | Playlist Previous |

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "playlist": {
                    "updated_at": "2019-07-16T18:36:24+07:00",
                    "user_id": 123,
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-16T18:36:24+07:00",
                    "id": "a371fd4b-f829-4c3f-84e7-f67ba94b9763",
                    "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "last_watch": 60,
                    "order_list": 2
                },
                "next": {
                    "updated_at": "2019-07-16T18:36:30+07:00",
                    "user_id": 123,
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-16T18:36:30+07:00",
                    "id": "972070df-16fb-4c47-93c8-7690de1ac5fc",
                    "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "last_watch": 60,
                    "order_list": 3
                },
                "previous": {
                    "updated_at": "2019-07-16T19:05:33+07:00",
                    "user_id": 123,
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-16T19:05:33+07:00",
                    "id": "80e7a905-4ea0-4184-a40f-814394fe653a",
                    "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "last_watch": 60,
                    "order_list": 1
                }
            }
        }

### Update Data by ID [POST /content/playlists/update/908244fb-3298-48ac-9d80-ce454782125f]

**Endpoint Path:** `POST /content/playlists/update/{id}`

### Requests
| Parameter | type | Description |
| -- | --- | -- |
| `user_id` | string | User ID |
| `playlistcategory_id` | string | ID From content playlists category |
| `metadata_id` | string | ID From content metadata |
| `order_list` | int | (Optional) Order Playlist |
| `last_watch` | int | (Optional) Remember Last Watch `in second` |

+ Request (application/json)

        {
            "last_watch": 120
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "908244fb-3298-48ac-9d80-ce454782125f"
            }
        }
 
### Delete Data by ID [POST /content/playlists/delete/908244fb-3298-48ac-9d80-ce454782125f]

**Endpoint Path:** `POST /content/playlists/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            }
        }


## User [/user]

### Get All Data [GET]

**Endpoint Path:** `GET /user`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "twitter_link": "https://twitter.com/example",
                    "birth_date": "2019-01-01",
                    "created_at": "2019-08-21T11:23:46+07:00",
                    "linkedin_link": "https://www.linkedin.com/example",
                    "facebook_link": "https://facebook.com/example",
                    "email": "iniemailpojok@gmail.com",
                    "photo_profile": "https://aws.s3.example/here/pojokproject.png",
                    "name": "Pojok Project",
                    "gender": "male",
                    "updated_at": "2019-08-21T11:23:46+07:00",
                    "last_name": "Project",
                    "about": "optional about",
                    "first_name": "Pojok",
                    "id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e",
                    "website_link": "https://example.com"
                }
            ]
        }

### Save Data [POST /user/store]

**Endpoint Path:** `POST /user/store`

### Requests
| Parameter       | type   | Status   | Description                     |
| --------------- | ------ | -------- | ------------------------------- |
| `name`          | string | required | name of user                    |
| `email`         | string | required | email of user                   |
| `first_name`    | string | required | first name of user              |
| `last_name`     | string | required | last name of user               |
| `birth_date`    | string | required | birth date of user              |
| `gender`        | string | required | gender of user (male/female)    |
| `photo_profile` | string | optional | path of photo profile from user |
| `about`         | string | optional | about of user                   |
| `website_link`  | string | optional | website link of user            |
| `facebook_link` | string | optional | facebook link of user           |
| `twitter_link`  | string | optional | twitter link of user            |
| `linkedin_link` | string | optional | linkedin link of user           |

+ Request (application/json)

        {
            "name": "Pojok Project",
            "email": "iniemailpojok@gmail.com",
            "first_name": "Pojok",
            "last_name": "Project",
            "birth_date": "2019-01-01",
            "gender": "male",
            "photo_profile": "https://aws.s3.example/here/pojokproject.png",
            "about": "optional about",
            "website_link": "https://example.com",
            "facebook_link": "https://facebook.com/example",
            "twitter_link": "https://twitter.com/example",
            "linkedin_link": "https://www.linkedin.com/example"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e"
            }
        }
        
### Get Data by ID [GET /user/91fa1120-17d4-442b-8338-aa3ab7bbc14e]

**Endpoint Path:** `GET /user/{id}`

+ Response 200 (application/json)

        {
            "twitter_link": "https://twitter.com/example",
            "birth_date": "2019-01-01",
            "created_at": "2019-08-21T11:23:46+07:00",
            "linkedin_link": "https://www.linkedin.com/example",
            "facebook_link": "https://facebook.com/example",
            "email": "iniemailpojok@gmail.com",
            "photo_profile": "https://aws.s3.example/here/pojokproject.png",
            "name": "Pojok Project",
            "gender": "male",
            "updated_at": "2019-08-21T11:23:46+07:00",
            "last_name": "Project",
            "about": "optional about",
            "first_name": "Pojok",
            "id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e",
            "website_link": "https://example.com"
        }

### Search Data Query [POST /user/search]

**Endpoint Path:** `POST /user/search`

### Requests
| Parameter | type   | Description                                |
| --------- | ------ | ------------------------------------------ |
| `query`   | string | Based on Table Name and Using `URL Encode` |

### Important
* Use `Search Query Builder`

+ Request (application/json)

        {
        "query": "%22name%3DPojok Project%22"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "twitter_link": "https://twitter.com/example",
                    "birth_date": "2019-01-01",
                    "created_at": "2019-08-21T11:23:46+07:00",
                    "linkedin_link": "https://www.linkedin.com/example",
                    "facebook_link": "https://facebook.com/example",
                    "email": "iniemailpojok@gmail.com",
                    "photo_profile": "https://aws.s3.example/here/pojokproject.png",
                    "name": "Pojok Project",
                    "gender": "male",
                    "updated_at": "2019-08-21T11:23:46+07:00",
                    "last_name": "Project",
                    "about": "optional about",
                    "first_name": "Pojok",
                    "id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e",
                    "website_link": "https://example.com"
                }
            ]
        }
        
### Update Data by ID [POST /user/update/91fa1120-17d4-442b-8338-aa3ab7bbc14e]

**Endpoint Path:** `POST /user/update/{id}`

### Requests
* Table same as Store Function

+ Request (application/json)

        {
        "email": "pojokan@gmail.com"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e"
            }
        }
        
### Delete Data by ID [POST /user/delete/91fa1120-17d4-442b-8338-aa3ab7bbc14e]

**Endpoint Path:** `POST /user/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            },
            "result": {
                "id": "91fa1120-17d4-442b-8338-aa3ab7bbc14e"
            }
        }
