FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# DBIL

END POINT API Database to DynamoDB

## API Version
* /v1

## Search Query Builder
* Before make request query, make sure, close by double quote tags and separate with comma if using multiple query
* Use RAW Encode for send a POST Request
  * RAW: 
    * Single Query : `query="video_title=Pojok Programers"`
    * Multiple Query : `query="video_title=Pojok Programers,video_genre=Tutorial"`
  * RAW + Encode:
    * Single Query : `query=%22video_title%3DPojok+Programers%22`
    * Multiple Query : `%22video_title%3DPojok+Programers%2Cvideo_genre%3DTutorial%22`

| Parameter     | value              |
| ------------- | ------------------ |
| `video_title` | `Pojok Programers` |
| `video_genre` | `Tutorial`         |

## Content Category [/content/category]

### List All Data [GET]

**Endpoint Path:** `GET /content/category`

+ Response 200 (application/json)

        [
            {
                "name": "Funny Videos",
                "description": "Only For Funny",
                "created_at": "2019-07-04T21:21:01+07:00",
                "id": "a8486ed6-59da-49c7-9605-466bef6dcd83",
                "updated_at": "2019-07-04T21:21:01+07:00"
            },
            {
                "name": "Funny Videos 223",
                "description": "Only For Funny 223",
                "created_at": "2019-07-04T21:27:23+07:00",
                "id": "cf31fb2e-9d06-49f9-af6f-c708edfe0871",
                "updated_at": "2019-07-04T22:13:07+07:00"
            }
        ]

### Store Data [POST /content/category/store]

**Endpoint Path:** `POST /content/category/store`

### Requests
| Parameter         | type       | Description                                                      |
| ------------------------------- | ------------ | ---------------------------------------------------------------------------------- |
| `name`                  | string | name of content category               |
| `description` | string | description of content category |

+ Request (application/json)

        {
           "name": "Action",
           "description": "Movie Action"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "bae04ac0-234a-431a-bed4-0bbc7026aa1c"
            }
        }
        
### Get Data by ID [GET /content/category/bae04ac0-234a-431a-bed4-0bbc7026aa1c]

**Endpoint Path:** `GET /content/category/{id}`

+ Response 200 (application/json)

        {
            "name": "Action",
            "description": "Movie Action",
            "created_at": "2019-07-05T09:47:05+07:00",
            "id": "bae04ac0-234a-431a-bed4-0bbc7026aa1c",
            "updated_at": "2019-07-05T09:47:05+07:00"
        }

### Search Data [POST /content/category/search]

**Endpoint Path:** `POST /content/category/search`

### Requests
| Parameter | type | Description |
| -- | --- | -- |
| `name` | string | name of content category |

+ Request (application/json)

        {
           "name": "Action",
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 2
            },
            "result": [
                {
                    "name": "Action",
                    "description": "Movie Action",
                    "created_at": "2019-07-05T09:47:05+07:00",
                    "id": "bae04ac0-234a-431a-bed4-0bbc7026aa1c",
                    "updated_at": "2019-07-05T09:47:05+07:00"
                },
                {
                    "name": "Action",
                    "description": "Movie Action",
                    "created_at": "2019-07-05T09:49:11+07:00",
                    "id": "8f245544-b4ac-468d-b291-7d10806b94d9",
                    "updated_at": "2019-07-05T09:49:11+07:00"
                }
            ]
        }
        
### Update Data by ID [POST /content/category/update/bae04ac0-234a-431a-bed4-0bbc7026aa1c]

**Endpoint Path:** `POST /content/category/update/{id}`

### Requests
| Parameter | type | Description |
| -- | --- | -- |
| `name` | string | name of content category |
| `description` | string | description of content category |

+ Request (application/json)

        {
           "name": "Action 2",
           "description": "Movie Action 2"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "bae04ac0-234a-431a-bed4-0bbc7026aa1c"
            }
        }
        
### Delete Data by ID [POST /content/category/delete/bae04ac0-234a-431a-bed4-0bbc7026aa1c]

**Endpoint Path:** `POST /content/category/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            }
        }

## Content Metadata [/content/metadata]

### List All Data [GET]

**Endpoint Path:** `GET /content/metadata`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "id": "81622337-8d48-4d5b-a41d-3f04d157385c",
                    "user_id": "0490412d-b05c-41be-912a-4aa2e401e572",
                    "video_description": "Tutorial of Programers",
                    "category_id": "bae04ac0-234a-431a-bed4-0bbc7026aa1c",
                    "video_title": "Pojok Programers",
                    "created_at": "2019-07-05T12:58:16+07:00",
                    "updated_at": "2019-07-05T12:58:16+07:00",
                    "video_subtitle": "English, Indonesia",
                    "video_genre": "Tutorial",
                    "video_saves": null,
                    "video_share": null,
                    "video_downloads": null,
                    "video_viewers": null
                }
            ]
        }

### Store Data [POST /content/metadata/store]

**Endpoint Path:** `POST /content/metadata/store`

### Requests
| Parameter           | type   | Description                   |
| ------------------- | ------ | ----------------------------- |
| `user_id`           | string | Id of User                    |
| `category_id`       | string | ID From Content Category      |
| `video_title`       | string | Title of Video                |
| `video_description` | string | Description of Video          |
| `video_genre`       | string | Genre of Video                |
| `video_viewers`     | int    | Viewers of Video (Optional)   |
| `video_share`       | int    | Share of Video (Optional)     |
| `video_saves`       | int    | Saves of Video (Optional)     |
| `video_downloads`   | int    | Downloads of Video (Optional) |

+ Request (application/json)

        {
            "user_id": "0490412d-b05c-41be-912a-4aa2e401e572",
            "category_id": "bae04ac0-234a-431a-bed4-0bbc7026aa1c",
            "video_title": "Pojok Programers",
            "video_description": "Tutorial of Programers",
            "video_genre": "Tutorial"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "81622337-8d48-4d5b-a41d-3f04d157385c"
            }
        }
        
### Get Data by ID [GET /content/metadata/81622337-8d48-4d5b-a41d-3f04d157385c]

**Endpoint Path:** `GET /content/metadata/{id}`

+ Response 200 (application/json)

        {
            "id": "81622337-8d48-4d5b-a41d-3f04d157385c",
            "user_id": "0490412d-b05c-41be-912a-4aa2e401e572",
            "video_description": "Tutorial of Programers",
            "category_id": "bae04ac0-234a-431a-bed4-0bbc7026aa1c",
            "video_title": "Pojok Programers",
            "created_at": "2019-07-05T12:58:16+07:00",
            "updated_at": "2019-07-05T12:58:16+07:00",
            "video_subtitle": "English, Indonesia",
            "video_genre": "Tutorial",
            "video_saves": null,
            "video_share": null,
            "video_downloads": null,
            "video_viewers": null
        }

### Search Data [POST /content/metadata/search]

**Endpoint Path:** `POST /content/metadata/search`

### Requests
| Parameter | type   | Description                                |
| --------- | ------ | ------------------------------------------ |
| `query`   | string | Based on Table Name and Using `URL Encode` |

### Important
* Use `Search Query Builder`

+ Request (application/json)

        {
            "query": "%22video_title%3DPojok+Programers%22"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "video_duration": "600",
                    "video_resolution": "360p, 480p, 720p, 1080p, 1080p HD",
                    "video_users_likes": "80",
                    "created_at": "2019-07-05T12:58:16+07:00",
                    "video_format": "mp4",
                    "video_share": "5",
                    "video_dislikes": "2",
                    "video_downloads": "11",
                    "video_description": "Tutorial of Programers",
                    "category_id": "bae04ac0-234a-431a-bed4-0bbc7026aa1c",
                    "video_title": "Pojok Programers",
                    "video_size": "104857600",
                    "video_comments": "2",
                    "updated_at": "2019-07-05T12:58:16+07:00",
                    "name_uploader": "Juni Yadi",
                    "video_likes": "100",
                    "video_subtitle": "English, Indonesia",
                    "video_genre": "Tutorial",
                    "id": "81622337-8d48-4d5b-a41d-3f04d157385c",
                    "video_users_dislikes": "2",
                    "video_saves": "1",
                    "video_viewers": "10"
                }
            ]
        }
        
### Update Data by ID [POST /content/metadata/update/81622337-8d48-4d5b-a41d-3f04d157385c]

**Endpoint Path:** `POST /content/metadata/update/{id}`

### Requests
* Table same as Store Function

+ Request (application/json)

        {
            "video_title": "Pojok Programers 2077"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "81622337-8d48-4d5b-a41d-3f04d157385c"
            }
        }
        
### Delete Data by ID [POST /content/metadata/delete/81622337-8d48-4d5b-a41d-3f04d157385c]

**Endpoint Path:** `POST /content/metadata/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            }
        }


## Content Metadata Video [/content/metadata/video]

### List All Data [GET]

**Endpoint Path:** `GET /content/metadata/video`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "duration": 30,
                    "size": 104857600,
                    "updated_at": "2019-08-10T07:18:50+00:00",
                    "metadata_id": "81622337-8d48-4d5b-a41d-3f04d157385c",
                    "format": "mp4",
                    "created_at": "2019-08-10T07:18:50+00:00",
                    "id": "9f428229-fda6-4972-9b71-284014c450b7",
                    "resolution": "1080p"
                }
            ]
        }

### Store Data [POST /content/metadata/video/store]

**Endpoint Path:** `POST /content/metadata/video/store`

### Requests
| Parameter     | type   | Description                                                                           |
| ------------- | ------ | ------------------------------------------------------------------------------------- |
| `metadata_id` | string | ID From Metadata                                                                      |
| `format`      | string | Format of Video                                                                       |
| `size`        | int    | Size of Video [using bytes](https://convertlive.com/u/convert/megabytes/to/bytes#100) |
| `resolution`  | string | Resolution of Video                                                                   |
| `duration`    | int    | Duration of Video [using seconds](https://convertlive.com/c/convert/time)             |

+ Request (application/json)

        {
            "metadata_id": "81622337-8d48-4d5b-a41d-3f04d157385c",
            "size": 104857600,
            "format": "mp4",
            "resolution": "1080p",
            "duration": 30
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "9f428229-fda6-4972-9b71-284014c450b7"
            }
        }
        
### Get Data by ID [GET /content/metadata/video/9f428229-fda6-4972-9b71-284014c450b7]

**Endpoint Path:** `GET /content/metadata/video/{id}`

+ Response 200 (application/json)

        {
            "duration": 30,
            "size": 104857600,
            "updated_at": "2019-08-10T07:18:50+00:00",
            "metadata_id": "81622337-8d48-4d5b-a41d-3f04d157385c",
            "format": "mp4",
            "created_at": "2019-08-10T07:18:50+00:00",
            "id": "9f428229-fda6-4972-9b71-284014c450b7",
            "resolution": "1080p"
        }

### Search Data [POST /content/metadata/video/search]

**Endpoint Path:** `POST /content/metadata/video/search`

### Requests
| Parameter | type   | Description                                |
| --------- | ------ | ------------------------------------------ |
| `query`   | string | Based on Table Name and Using `URL Encode` |

### Important
* Use `Search Query Builder`

+ Request (application/json)

        {
            "query": "%22format%3Dmp4%22"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "duration": 30,
                    "size": 104857600,
                    "updated_at": "2019-08-10T07:18:50+00:00",
                    "metadata_id": "81622337-8d48-4d5b-a41d-3f04d157385c",
                    "format": "mp4",
                    "created_at": "2019-08-10T07:18:50+00:00",
                    "id": "9f428229-fda6-4972-9b71-284014c450b7",
                    "resolution": "1080p"
                }
            ]
        }
        
### Update Data by ID [POST /content/metadata/video/update/9f428229-fda6-4972-9b71-284014c450b7]

**Endpoint Path:** `POST /content/metadata/video/update/{id}`

### Requests
* Table same as Store Function

+ Request (application/json)

        {
            "size": 1024,
            "format": "mkv"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "9f428229-fda6-4972-9b71-284014c450b7"
            }
        }
        
### Delete Data by ID [POST /content/metadata/video/delete/9f428229-fda6-4972-9b71-284014c450b7]

**Endpoint Path:** `POST /content/metadata/video/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            }
        }
        
## Content Comment [/content/comment/metadata/83f75217-bcaf-415f-be53-8ca34a5b16be]

### List All Data [GET]

**Endpoint Path:** `/content/comment/metadata/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 2
            },
            "result": [
                {
                    "reply_id": null,
                    "updated_at": "2019-07-08T15:06:47+07:00",
                    "user_id": "123",
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-08T15:04:52+07:00",
                    "id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d",
                    "message": "this just test"
                },
                {
                    "reply_id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d",
                    "updated_at": "2019-07-08T15:07:48+07:00",
                    "user_id": "321",
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-08T15:05:43+07:00",
                    "id": "5ea23f47-94ab-4a38-88e4-a008bb2df23a",
                    "message": "this just reply test"
                }
            ]
        }

### Store Data [POST /content/comment/store]

**Endpoint Path:** `POST /content/comment/store`

### Requests
| Parameter     | type   | Description                                               |
| ------------- | ------ | --------------------------------------------------------- |
| `metadata_id` | string | Metadata ID from Content Metadata                         |
| `user_id`     | string | User ID                                                   |
| `reply_id`    | string | ID From Comment, if they reply another comment (Optional) |
| `message`     | string | Reply Message                                             |

+ Request (application/json)

        {
            "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
            "user_id": "123",
            "message": "this just test"
        }


+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d"
            }
        }

### Get Comment by ID [GET /content/comment/83f75217-bcaf-415f-be53-8ca34a5b16be]

**Endpoint Path:** `GET /content/comment/{id}`

+ Response 200 (application/json)

        {
            "reply_id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d",
            "updated_at": "2019-07-08T15:07:48+07:00",
            "user_id": "321",
            "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
            "created_at": "2019-07-08T15:05:43+07:00",
            "id": "5ea23f47-94ab-4a38-88e4-a008bb2df23a",
            "message": "this just reply test"
        }

### Update Data by ID [POST /content/comment/update/b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d]

**Endpoint Path:** `POST /content/comment/update/{id}`

### Requests
| Parameter     | type   | Description                                               |
| ------------- | ------ | --------------------------------------------------------- |
| `metadata_id` | string | Metadata ID from Content Metadata                         |
| `user_id`     | string | User ID                                                   |
| `reply_id`    | string | ID From Comment, if they reply another comment (Optional) |
| `message`     | string | Reply Message                                             |

+ Request (application/json)

        {
            "metadata_id": "83f75217-bcaf-415f-1234-8ca34a5b16be"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d"
            }
        }
        
### Delete Data by ID [POST /content/metadata/delete/b14571d3-ccc4-4d0a-977f-4ce6fdfc6b1d]

**Endpoint Path:** `POST /content/comment/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            }
        }        
        
## Content Playlists Category [/content/playlists/category]

### List All Data [GET]

**Endpoint Path:** `GET content/playlists/category`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-07-16T17:26:37+07:00",
                    "user_id": 123,
                    "description": "Step By Step Membuat Node JS",
                    "created_at": "2019-07-16T17:26:37+07:00",
                    "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "title": "Tutorial Node JS Untuk Pemula",
                    "status": "publik"
                }
            ]
        }


### Store Data [POST /content/playlists/category/store]

**Endpoint Path:** `POST /content/playlists/category/store`

### Requests
| Parameter         | type     | Description                                                             |
| ------------------------ | --------- | -------------------------------------------------------------------------------- |
| `user_id`         | string | User ID                                                                     |
| `title`             | string | title of content playlists category             |
| `description` | string | description of content playlists category |
| `status`           | string | `publik|user|pribadi`                                         |

+ Request (application/json)

        {
            "user_id": 123,
            "title": "Tutorial Node JS Untuk Pemula",
            "description": "Step By Step Membuat Node JS",
            "status": "publik"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e"
            }
        }
        
### Get Data by ID [GET /content/playlists/category/a02d33c3-e82e-4df7-be1f-c01a943ad55e]

**Endpoint Path:** `GET /content/playlists/category/{id}`

+ Response 200 (application/json)

        {
            "updated_at": "2019-07-16T17:26:37+07:00",
            "user_id": 123,
            "description": "Step By Step Membuat Node JS",
            "created_at": "2019-07-16T17:26:37+07:00",
            "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
            "title": "Tutorial Node JS Untuk Pemula",
            "status": "publik"
        }

### Search Data [POST /content/playlists/category/search]

**Endpoint Path:** `POST /content/playlists/category/search`

### Requests
| Parameter | type   | Description                         |
| --------- | ------ | ----------------------------------- |
| `title`   | string | title of content playlists category |

+ Request (application/json)

        {
            "title": "Tutorial Node JS Untuk Pemula"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "search query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-07-16T17:26:37+07:00",
                    "user_id": 123,
                    "description": "Step By Step Membuat Node JS",
                    "created_at": "2019-07-16T17:26:37+07:00",
                    "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "title": "Tutorial Node JS Untuk Pemula",
                    "status": "publik"
                }
            ]
        }
        
### Update Data by ID [POST /content/playlists/category/update/a02d33c3-e82e-4df7-be1f-c01a943ad55e]

**Endpoint Path:** `POST /content/playlists/category/update/{id}`

### Requests
| Parameter | type | Description |
| -- | --- | -- |
| `user_id` | string | User ID |
| `title` | string | title of content playlists category |
| `description` | string | description of content playlists category |
| `status` | string | `publik|user|pribadi` |

+ Request (application/json)

        {
            "title": "Tutorial Node JS"
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e"
            }
        }
        
### Delete Data by ID [POST /content/playlists/category/delete/a02d33c3-e82e-4df7-be1f-c01a943ad55e]

**Endpoint Path:** `POST /content/playlists/category/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            }
        }

## Content Playlists [/content/playlists]

### List All Data [GET]

**Endpoint Path:** `GET content/playlists`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "index list query has been performed, data has been found",
                "total": 1
            },
            "result": [
                {
                    "updated_at": "2019-07-16T18:21:42+07:00",
                    "user_id": 123,
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-16T18:21:42+07:00",
                    "id": "908244fb-3298-48ac-9d80-ce454782125f",
                    "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "last_watch": 60,
                    "order_list": 1
                }
            ]
        }


### Save Data [POST /content/playlists/store]

**Endpoint Path:** `/content/playlists/store`

### Requests
| Parameter                         | type     | Description                                                               |
| ---------------------------------------- | --------- | ---------------------------------------------------------------------------------- |
| `user_id`                         | string | User ID                                                                       |
| `playlistcategory_id` | string | ID From content playlists category                 |
| `metadata_id`                 | string | ID From content metadata                                     |
| `order_list`                   | int       | (Optional) Order Playlist                                   |
| `last_watch`                   | int       | (Optional) Remember Last Watch `in second` |

+ Request (application/json)

        {
            "user_id": 123,
            "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
            "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
            "order_list": 1,
            "last_watch": 60
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "id": "908244fb-3298-48ac-9d80-ce454782125f"
            }
        }
  


### Get Data by ID [GET /content/playlists/908244fb-3298-48ac-9d80-ce454782125f]

**Endpoint Path:** `GET /content/playlists/{id}`

### Important
* `next` and `previous` will work, only if `order_list` has been set
* return null if `next` and `previous` data not found

### Response
| Parameter  | type  | Description       |
| ---------- | ----- | ----------------- |
| `playlist` | array | Playlist Now      |
| `next`     | array | Playlist Next     |
| `previous` | array | Playlist Previous |

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been saved"
            },
            "result": {
                "playlist": {
                    "updated_at": "2019-07-16T18:36:24+07:00",
                    "user_id": 123,
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-16T18:36:24+07:00",
                    "id": "a371fd4b-f829-4c3f-84e7-f67ba94b9763",
                    "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "last_watch": 60,
                    "order_list": 2
                },
                "next": {
                    "updated_at": "2019-07-16T18:36:30+07:00",
                    "user_id": 123,
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-16T18:36:30+07:00",
                    "id": "972070df-16fb-4c47-93c8-7690de1ac5fc",
                    "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "last_watch": 60,
                    "order_list": 3
                },
                "previous": {
                    "updated_at": "2019-07-16T19:05:33+07:00",
                    "user_id": 123,
                    "metadata_id": "83f75217-bcaf-415f-be53-8ca34a5b16be",
                    "created_at": "2019-07-16T19:05:33+07:00",
                    "id": "80e7a905-4ea0-4184-a40f-814394fe653a",
                    "playlistcategory_id": "a02d33c3-e82e-4df7-be1f-c01a943ad55e",
                    "last_watch": 60,
                    "order_list": 1
                }
            }
        }

### Update Data by ID [POST /content/playlists/update/908244fb-3298-48ac-9d80-ce454782125f]

**Endpoint Path:** `POST /content/playlists/update/{id}`

### Requests
| Parameter | type | Description |
| -- | --- | -- |
| `user_id` | string | User ID |
| `playlistcategory_id` | string | ID From content playlists category |
| `metadata_id` | string | ID From content metadata |
| `order_list` | int | (Optional) Order Playlist |
| `last_watch` | int | (Optional) Remember Last Watch `in second` |

+ Request (application/json)

        {
            "last_watch": 120
        }

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been updated"
            },
            "result": {
                "id": "908244fb-3298-48ac-9d80-ce454782125f"
            }
        }
 
### Delete Data by ID [POST /content/playlists/delete/908244fb-3298-48ac-9d80-ce454782125f]

**Endpoint Path:** `POST /content/playlists/delete/{id}`

+ Response 200 (application/json)

        {
            "status": {
                "code": "200",
                "message": "data has been deleted"
            }
        }